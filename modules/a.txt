sql = """
CREATE DATABASE "{}"
  WITH ENCODING='UTF8'
       OWNER=postgres
       TEMPLATE=template0
       LC_COLLATE='Portuguese, Brazil'
       LC_CTYPE='C'
       CONNECTION LIMIT=-1
       TABLESPACE=pg_default;
""".format('newDatabase')

db.executesql(sql)


from ColunasEntidades import ColunasEntidades
colunasEntidades = ColunasEntidades(db, cAppl=1)
retColunasEntidades = colunasEntidades.selectColunasEntidadesResolvidasByCodigoEntidade(1)
colunasEntidade  = retColunasEntidades[1][0]
colunasEntidade
colunasEntidade.
colunasEntidade.colunas.columnName
colunasEntidade  = retColunasEntidades[1]
colunasEntidade
len(colunasEntidade)
for n, col in enumerate(colunasEntidade):
    print n, '-', colunasEntidade.colunas.columnName
for n, col in enumerate(colunasEntidade):
    print n, '-', col.colunas.columnName
for n, col in enumerate(1,colunasEntidade):
    print n, '-', col.colunas.columnName
from Entidades                     import Entidades
entidades                     = Entidades(db,cAppl=1)
retEntidade = entidades.selectEntidadesBycodigoAplicacao()
entidades   = retEntidade[1][0]
entidade   = retEntidade[1][0]
print "{0:50}= db['{0}']\n".format(entidade.nomeFisico)
%
%hist
%who
help %who
help
help()
cls
print "{0:50}= db['{0}']\n".format(entidade.nomeFisico)
%hist
colunasEntidade
colunasEntidade[0]
col = colunasEntidade[0]
col
col.datatypes
col.datatypes.descricao
col.colunas.
col
col.colunasEntidades
col.colunas.attributeName
%who
import utilities as utl
label = col.colunas.attributeName
label = utl.remover_acentos(col.colunas.attributeName)
label
label = utl.remover_acentos(col.colunas.attributeName, 30)
label
label = utl.remover_acentos(col.colunas.attributeName, 10)
label
label = utl.txtAbrev(col.colunas.attributeName, 30)
label
label = utl.txtAbrev(col.colunas.attributeName, 10)
label
label = utl.txtAbrev(col.colunas.attributeName, 30, removerAcentos=0)
label = utl.txtAbrev(col.colunas.attributeName, 30, 'removerAcentos'=0)
label = utl.txtAbrev(col.colunas.attributeName, 30, removerAcentos=0)
col.colunas.attributeName
label = utl.txtAbrev(col.colunas.attributeName, 30, removerAcentos=0)
%hist


colunas = db.colunas
cols = db(colunas).select()
for col in cols:
    wrd=0
    if len(col.attributeName.split()) > 0:
       wrd = 1
    db(colunas.id == col.id).update(label = ' '.join(col.attributeName.split()[wrd:]))

import PrimaryKeys
primaryKeys = PrimaryKeys.PrimaryKeys(db)
primaryKey  = primaryKeys.selectPrimaryKeysByCodigoEntidade(1)

for col in colunasEntidade:
    if (col.colunas.id in primaryKey and
        primaryKeys[col.colunas.id] == 3):
        print 'writable = False'
    else:
        print 'writable = True'

import CreateTables
ct =  CreateTables.CreateTables(db, sessionId=1, cAppl=1, userName='Flavio')
rct = ct.createTables()

